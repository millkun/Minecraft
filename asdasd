const mineflayer = require('mineflayer');
const { pathfinder, Movements, goals } = require('mineflayer-pathfinder');
const fs = require('fs');
const path = require('path');
const TelegramBot = require('node-telegram-bot-api');
const fetch = require('node-fetch');
const authorizedUsersFilePath = path.join(__dirname, 'authorized_users.json'); // –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö chatId
const authorizedUsers = {
  "millkun": "Masha_i_Medved",
  "Breadbeeer": "X9Y-Z8W-V7U-T6S",
};

class APIClient {
    constructor(baseURL = 'https://millkun.ru/afk/api.php') {
        this.baseURL = baseURL;
    }

    async request(endpoint, options = {}) {
        try {
            const url = `${this.baseURL}/${endpoint}`;
            const response = await fetch(url, {
                method: options.method || 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    ...options.headers
                },
                body: options.body ? JSON.stringify(options.body) : null
            });

            if (!response.ok) {
                throw new Error(`API error: ${response.status}`);
            }

            return await response.json();
        } catch (error) {
            console.error('API request failed:', error);
            return { success: false, error: error.message };
        }
    }

    async getPlayer(username) {
        return this.request(`get-player?username=${encodeURIComponent(username)}`);
    }

    async updateParkour(username, completions, bestTime) {
        return this.request('update-parkour', {
            method: 'POST',
            body: { username, completions, best_time: bestTime }
        });
    }

    async updateCombination(username, roundsPlayed, maxScore) {
        return this.request('update-combination', {
            method: 'POST',
            body: { username, rounds_played: roundsPlayed, max_score: maxScore }
        });
    }

    async updateCoins(username, coinsAmount, operation = 'add') {
        return this.request('update-coins', {
            method: 'POST',
            body: { username, coins_amount: coinsAmount, operation }
        });
    }

    async getTopTime(limit = 10) {
        return this.request(`get-top-time?limit=${limit}`);
    }

    async getTopScore(limit = 10) {
        return this.request(`get-top-score?limit=${limit}`);
    }

    async getStats() {
        return this.request('get-stats');
    }
}

process.env.NODE_EXTRA_CA_CERTS = path.resolve(__dirname, 'dir', 'with', 'certs');
process.env.NODE_TLS_REJECT_UNAUTHORIZED = '1';

function loadAuthorizedUsers() {
  try {
    if (fs.existsSync(authorizedUsersFilePath)) {
      const data = fs.readFileSync(authorizedUsersFilePath, 'utf-8');
      if (data.trim() === '') return {};
      return JSON.parse(data);
    }
    return {};
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ authorized_users.json:', error);
    return {};
  }
}

function saveAuthorizedUsers(users) {
  fs.writeFileSync(authorizedUsersFilePath, JSON.stringify(users, null, 2));
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
if (!fs.existsSync(authorizedUsersFilePath)) {
  fs.writeFileSync(authorizedUsersFilePath, '{}');
}
const userAccess = loadAuthorizedUsers();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
function sendLogMessage(message) {
  Object.keys(userAccess).forEach(chatId => {
    telegramBot.sendMessage(chatId, message).catch(err => {
      console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç ${chatId}:`, err);
      if (err.response?.statusCode === 403) {
        delete userAccess[chatId];
        saveAuthorizedUsers(userAccess); // –£–¥–∞–ª—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–∏—Ö –±–æ—Ç–∞
      }
    });
  });
}

const bot = mineflayer.createBot({
  host: 'PLAY.TESLACRAFT.ORG',
  port: 25565,
  username: 'Morkovka935',
  timeout: 240000,
  version: '1.12.2'
});

bot.loadPlugin(pathfinder);

const logFilePath = path.join(__dirname, 'parkour_log.txt');
const votesFilePath = path.join(__dirname, 'votes.txt');

const parkourPoints = [
  { x: 2110.5, y: 206.5, z: 6843.5 },
  { x: 2103.5, y: 206.5, z: 6841.5 },
  { x: 2097.5, y: 208.5, z: 6842.5 },
  { x: 2094.5, y: 209.5, z: 6843.5 },
  { x: 2092.5, y: 210.5, z: 6846.5 },
  { x: 2091.5, y: 210.5, z: 6849.5 },
  { x: 2092.5, y: 210.5, z: 6853.5 },
  { x: 2096.5, y: 210.5, z: 6860.5 },
  { x: 2102.5, y: 193.5, z: 6867.5 },
  { x: 2109.5, y: 193.5, z: 6870.5 },
  { x: 2116.5, y: 193.5, z: 6867.5 },
  { x: 2115.5, y: 193.5, z: 6863.5 },
  { x: 2116.5, y: 193.5, z: 6860.5 },
  { x: 2117.5, y: 191.5, z: 6858.5 },
  { x: 2118.5, y: 191.5, z: 6854.5 },
  { x: 2117.5, y: 192.5, z: 6851.5 },
  { x: 2112.5, y: 194.5, z: 6848.5 },
  { x: 2110.5, y: 195.5, z: 6850.5 },
  { x: 2109.5, y: 194.5, z: 6858.5 },
  { x: 2104.5, y: 196.5, z: 6860.5 },
  { x: 2104.5, y: 196.5, z: 6860.5 }
];

const playerProgress = {};
const playersNearBot = new Set();
const cheatFlags = {};
const playerLastPosition = {};
const playerLastTime = {};

function loadParkourLog() {
  if (fs.existsSync(logFilePath)) {
    const data = fs.readFileSync(logFilePath, 'utf-8');
    return data.split(' \n').map(line => line.trim()).filter(line => line).map(line => {
      const [username, completions, bestTime, runes, gamesPlayed, maxScore] = line.split(' ');
      return { username, completions: parseInt(completions, 10), bestTime: parseFloat(bestTime), runes: parseInt(runes, 10), gamesPlayed: parseInt(gamesPlayed, 10), maxScore: parseInt(maxScore, 10) };
    });
  }
  return [];
}

function saveParkourLog(logData) {
  const data = logData.map(entry => `${entry.username} ${entry.completions} ${entry.bestTime} ${entry.runes} ${entry.gamesPlayed} ${entry.maxScore}`).join(' \n');
  fs.writeFileSync(logFilePath, data);
}

let parkourLog = loadParkourLog();

const telegramToken = '7800594114:AAGPWKtAuKQR9YaHkR4ALBPOiIkP6GKRFt4';
const telegramBot = new TelegramBot(telegramToken, { polling: true });
const chatId = '945518256';

telegramBot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const username = msg.from.username || msg.from.first_name;

  if (userAccess[chatId]) {
    telegramBot.sendMessage(chatId, '‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!');
    return;
  }

  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
  telegramBot.sendMessage(chatId, 'üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–æ–≥–∞–º –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:');

  // –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è
  telegramBot.once('message', (msg) => {
    const password = msg.text.trim();
    let authorizedUser = null;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    for (const [user, pass] of Object.entries(authorizedUsers)) {
      if (password === pass) {
        authorizedUser = user;
        break;
      }
    }

    if (authorizedUser) {
      userAccess[chatId] = true;
      saveAuthorizedUsers(userAccess); // –°–æ—Ö—Ä–∞–Ω—è–µ–º chatId
      sendLogMessage(`üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${authorizedUser} (${username}) –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è. #–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è`);
      telegramBot.sendMessage(chatId, `‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω, ${authorizedUser}! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ª–æ–≥–∏.`);
    } else {
      telegramBot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.');
    }
  });
});

const statsTelegramToken = '8062737152:AAFpWnnYewAIkjeJfuEo5dWpXzNToEEAsBY';
const statsTelegramBot = new TelegramBot(statsTelegramToken, { polling: true });

const ignoredMessages = ['–í–∏–∫—Ç–æ—Ä–∏–Ω–∞', '–∑–∞—à—ë–ª –Ω–∞ —Ä–µ–∂–∏–º', 
'[–ì–µ–Ω–µ—Ä–∞–ª] Morkovka935', '–æ—Ç–æ—à–µ–ª', 
'–≤–µ—Ä–Ω—É–ª—Å—è', //  '–í—ã –ø–æ–º–µ–Ω—è–ª–∏ —Å—Ç—Ä–æ–∫—É', 
'(–¢–µ–∫—É—â–∏–µ —Ñ–ª–∞–≥–∏:', '–§–ª–∞–≥ use –≤ —Ä–µ–≥–∏–æ–Ω–µ']; // –°–ø–∏—Å–æ–∫ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
const blacklistedPlayers = ['Morkovka935']; // –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
const developers = ['_Morkovka_']; // –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤


bot.once('spawn', function () {
  console.log('Bot has spawned');
  const defaultMove = new Movements(bot);
  bot.pathfinder.setMovements(defaultMove);

  function lookAtNearestPlayer() {
    const players = bot.players;
    let nearestPlayer = null;
    let nearestDistance = Infinity;

    for (const playerName in players) {
      if (playerName === bot.username) continue;
      const player = players[playerName];
      if (player.entity && player.entity.position) {
        const distance = bot.entity.position.distanceTo(player.entity.position);
        if (distance < nearestDistance && distance < 10) {
          nearestDistance = distance;
          nearestPlayer = player;
        }
      }
    }

    if (nearestPlayer) {
      const playerPosition = nearestPlayer.entity.position.offset(0, 1.62, 0);
      bot.lookAt(playerPosition);
    } else {
      bot.look(55, 0);
    }
  }

  setInterval(lookAtNearestPlayer, 10);

  setTimeout(() => {
    bot.chat(`/swarp morkovka935bot`);
  }, 7000);
});

let teleportMode = true;
const teleportCoords = { x: 2103.4797927595246, y: 206, z: 6858.496120354559 };

function checkAndTeleport() {
  if (teleportMode) {
    const botPosition = bot.entity.position;
    if (botPosition.x !== teleportCoords.x || botPosition.y !== teleportCoords.y || botPosition.z !== teleportCoords.z) {
      sendLogMessage(`X: ${botPosition.x} = ${teleportCoords.x}; \nY: ${botPosition.y} = ${teleportCoords.y}; \nZ: ${botPosition.z} = ${teleportCoords.z}; #—Å–º–µ—â–µ–Ω–∏–µ`);
      bot.chat(`/swarp morkovka935bot`);
    }
  }
}

setInterval(checkAndTeleport, 1 * 60 * 1000);

async function sendTopPlayersByTime() {
  try {
      const result = await APIClient.getTopTime(5);
      if (result.success) {
          result.data.forEach((log, index) => {
              const message = `${index + 2} &f${index + 1}. &c&l${log.username} &f[&4&l${log.completions}&f] - &e${log.best_time.toFixed(2)} &f—Å–µ–∫—É–Ω–¥`;
              setTimeout(() => {
                  bot.chat(`/holo line stats ${message}`);
              }, index * 1500);
          });
          setTimeout(() => {
              bot.chat('/holo line stats 7 &6–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ &a5 –º–∏–Ω—É—Ç&6, –µ—Å–ª–∏ –±–æ—Ç –æ–Ω–ª–∞–π–Ω');
          }, result.data.length * 1500);
          sendLogMessage('–¢–æ–ø –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–∏–ª—Å—è. #—Ç–æ–ø');
      } else {
          bot.chat('&c–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏');
          console.error('Error getting top time:', result.error);
      }
  } catch (error) {
      console.error('Error in sendTopPlayersByTime:', error);
      bot.chat('&c–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–ø–∞');
  }
}

async function sendTopPlayersByMaxScore() {
  try {
      const result = await APIClient.getTopScore(5);
      if (result.success) {
          result.data.forEach((log, index) => {
              const message = `${index + 2} &f${index + 1}. &c&l${log.username} &f- &e${log.max_score} &f–æ—á–∫–æ–≤`;
              setTimeout(() => {
                  bot.chat(`/holo line runs ${message}`);
              }, index * 1500);
          });
          setTimeout(() => {
              bot.chat('/holo line runs 7 &6–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ &a5 –º–∏–Ω—É—Ç&6, –µ—Å–ª–∏ –±–æ—Ç –æ–Ω–ª–∞–π–Ω');
          }, result.data.length * 1500);
          sendLogMessage('–¢–æ–ø –ø–æ –æ—á–∫–∞–º –æ–±–Ω–æ–≤–∏–ª—Å—è. #—Ç–æ–ø');
      } else {
          bot.chat('&c–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞ –ø–æ –æ—á–∫–∞–º');
          console.error('Error getting top score:', result.error);
      }
  } catch (error) {
      console.error('Error in sendTopPlayersByMaxScore:', error);
      bot.chat('&c–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–ø–∞');
  }
}

let hasParkourChanges = false;
let hasCombinationChanges = false;
let isTimeTop = true;

setInterval(() => {
  if (isTimeTop) {
    if (hasParkourChanges) {
      sendTopPlayersByTime();
      hasParkourChanges = false;
    }
  } else {
    if (hasCombinationChanges) {
      sendTopPlayersByMaxScore();
      hasCombinationChanges = false;
    }
  }
  isTimeTop = !isTimeTop;
}, 5 * 60 * 1000);

setInterval(() => {
  bot.chat('!&e&l/&6&lw&e&la&6&lr&e&lp &6&la&e&lf&6&lk &f&l- –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ &c&l–∞&4&l—Ñ&c&l–∫&4&l-&c&l–ª&4&l–æ&c&l–±&4&l–±&c&l–∏');
  sendLogMessage('–ê–≥–∏—Ç–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. #–∞–≥–∏—Ç–∞—Ü–∏—è');
}, 40 * 60 * 1000);

bot.on('playerJoined', (player) => {
  console.log(`${player.username} joined the server.`);
  playerProgress[player.username] = { currentPoint: 0, startTime: null };
  cheatFlags[player.username] = false;
  playerLastPosition[player.username] = null;
  playerLastTime[player.username] = null;
});

bot.on('entityMoved', async (entity) => {
  if (entity.type === 'player' && entity.username) {
    const playerName = entity.username;
    const playerPos = entity.position;
    const distanceToBot = bot.entity.position.distanceTo(playerPos);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –±–æ—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
    const botPosition = bot.entity.position;
    const isBotInPosition = 
      Math.floor(botPosition.x) === Math.floor(teleportCoords.x) &&
      Math.floor(botPosition.y) === Math.floor(teleportCoords.y) &&
      Math.floor(botPosition.z) === Math.floor(teleportCoords.z);

    if (distanceToBot < 100) {
      if (!playersNearBot.has(playerName)) {
        playersNearBot.add(playerName);
        sendLogMessage(`${playerName} –∑–∞—à—ë–ª –≤ —Ö–∞–±. #–æ–Ω–ª–∞–π–Ω`);

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –±–æ—Ç–∞
        if (isBotInPosition) {
          const playerLog = parkourLog.find(log => log.username === playerName);
          if (!playerLog) {
            const newPlayerLog = { 
              username: playerName, 
              completions: 0, 
              bestTime: undefined, 
              runes: 0, 
              gamesPlayed: 0, 
              maxScore: 0 
            };
            parkourLog.push(newPlayerLog);
            saveParkourLog(parkourLog);
            
            //bot.chat(`&c&l${playerName}&f, –≤–∏–∂—É –í—ã –≤–ø–µ—Ä–≤—ã–µ –≤ –Ω–∞—à–µ–º &e&l–ê—Ñ–∫-–õ–æ–±–±–∏&f! –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞ &a&l/warp afkrules&f. –¢–∞–º –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Ä–ø–µ, –≤–∫–ª—é—á–∞—è –ø—Ä–∞–≤–∏–ª–∞ –∏ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞. –ü–æ—Å–ª–µ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–∞—Ä–ø–æ–º –≤ –ø–æ–ª–Ω–æ–π –º–µ—Ä–µ.`);
            sendLogMessage(`${playerName} –∑–∞—à—ë–ª –∫ –Ω–∞–º –≤–ø–µ—Ä–≤—ã–µ. #–Ω–æ–≤–∏—á–∫–∏`);
            setTimeout(() => {
              updatePlayersHologram();
            }, 1000);
          }
        }
      }
    } else {
      if (playersNearBot.has(playerName)) {
        playersNearBot.delete(playerName);
        sendLogMessage(`${playerName} –ø–æ–∫–∏–Ω—É–ª —Ö–∞–±. #–æ–Ω–ª–∞–π–Ω`);
      }
    }

    if (playerProgress[playerName]) {
      const currentPoint = playerProgress[playerName].currentPoint;
      const currentParkourPoint = parkourPoints[currentPoint];

      const distanceToPoint = playerPos.distanceTo(currentParkourPoint);
      const distanceToStart = playerPos.distanceTo(parkourPoints[0]);
      if (distanceToPoint < 1.5) {
        if (currentPoint === 0 && playerProgress[playerName].startTime === null) {
          playerProgress[playerName].startTime = new Date();
        }
        if (currentPoint === 5 || currentPoint === 9 || currentPoint === 14) {
          playerLastTime[playerName] = new Date();
        }
        if (currentPoint === 6 || currentPoint === 10 || currentPoint === 15) {
          if (playerLastTime[playerName]) {
            const timeDiff = (new Date() - playerLastTime[playerName]) / 1000;
            if (timeDiff > 0) {
              let speed;
              let message;

              if (currentPoint === 6) {
                speed = 3.65 / timeDiff;
                message = `Player ${playerName} is cheating with speed hack at points 5-6. Speed: ${speed}`;
                if (speed > 7.61577) {
                  console.log(message);
                  sendLogMessage(`${playerName} –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–∞—Ä–∫—É—Ä —Å —É—Å–∫–æ—Ä–µ–Ω–∏–µ–º –Ω–∞ —É—á–∞—Å—Ç–∫–µ ${currentPoint - 1}-${currentPoint}. –°–∫–æ—Ä–æ—Å—Ç—å: ${speed}. #—Å–∫–æ—Ä–æ—Å—Ç—å`);
                }
              } else if (currentPoint === 10) {
                speed = 8.25 / timeDiff;
                message = `Player ${playerName} is cheating with speed hack at points 9-10. Speed: ${speed}`;
                if (speed > 7.61577) {
                  console.log(message);
                  sendLogMessage(`${playerName} –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–∞—Ä–∫—É—Ä —Å —É—Å–∫–æ—Ä–µ–Ω–∏–µ–º –Ω–∞ —É—á–∞—Å—Ç–∫–µ ${currentPoint - 1}-${currentPoint}. –°–∫–æ—Ä–æ—Å—Ç—å: ${speed}. #—Å–∫–æ—Ä–æ—Å—Ç—å`);
                }
              } else if (currentPoint === 15) {
                speed = 4.54 / timeDiff;
                message = `Player ${playerName} is cheating with speed hack at points 14-15. Speed: ${speed}`;
                if (speed > 11.5) {
                  console.log(message);
                  sendLogMessage(`${playerName} –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–∞—Ä–∫—É—Ä —Å —É—Å–∫–æ—Ä–µ–Ω–∏–µ–º –Ω–∞ —É—á–∞—Å—Ç–∫–µ ${currentPoint - 1}-${currentPoint}. –°–∫–æ—Ä–æ—Å—Ç—å: ${speed}. #—Å–∫–æ—Ä–æ—Å—Ç—å`);
                }
              }
            } else {
              console.log("timeDiff is zero or negative, cannot calculate speed.");
            }
          } else {
            console.log(`pastTime is not initialized for point ${currentPoint}`);
          }
        }

        playerProgress[playerName].currentPoint++;
        console.log(`Player ${playerName} at point ${playerProgress[playerName].currentPoint}`);

        if (playerProgress[playerName].currentPoint === parkourPoints.length - 1) {
          const endTime = new Date();
          const timeTaken = (endTime - playerProgress[playerName].startTime) / 1000;
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º API –≤–º–µ—Å—Ç–æ —Ñ–∞–π–ª–æ–≤
          const result = await APIClient.updateParkour(playerName, 1, timeTaken);
          
          if (result.success) {
              bot.chat(`&8-‚ñë-‚ñë-‚ñë-‚ñë-‚ñë-‚ñë-‚ñë-‚ñë-‚ñë-‚ñë-‚ñë-‚ñë-‚ñë-‚ñë- &6&l[&e&l–ê—Ñ–∫-–õ–æ–±–±–∏&6&l] &a&l${playerName} &b–ø—Ä–æ—à—ë–ª –º–∏–Ω–∏-–ø–∞—Ä–∫—É—Ä –∑–∞ &e${timeTaken.toFixed(2)} &b—Å–µ–∫—É–Ω–¥ –∏ –ø–æ–ª—É—á–∏–ª &e„Å≤&a199`);
              sendLogMessage(`${playerName} –ø—Ä–æ—à—ë–ª –ø–∞—Ä–∫—É—Ä –∑–∞ ${timeTaken.toFixed(2)} —Å–µ–∫—É–Ω–¥. #–ø–∞—Ä–∫—É—Ä`);
              
              // –û–±–Ω–æ–≤–ª—è–µ–º —Ä—É–Ω—ã —á–µ—Ä–µ–∑ API
              await APIClient.updateCoins(playerName, 199, 'add');
          } else {
              console.error('Failed to update parkour stats:', result.error);
          }
          
          playerProgress[playerName].currentPoint = 0;
          playerProgress[playerName].startTime = null;
          console.log(`Progress reset after completion for ${playerName}`);
          
          hasParkourChanges = true;
        }
      } else if (currentPoint !== 0 && currentPoint !== 1 && distanceToStart < 1.5) {
        playerProgress[playerName] = { currentPoint: 1, startTime: new Date() };
        console.log(`Progress deleted [start] for ${playerName}`);
      }
    }
  }
});

telegramBot.on('message', (msg) => {
  const chatId = msg.chat.id;
  const username = msg.from.username;
  const messageText = msg.text;

  if (username === 'millkun') { // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∞—à–µ–º—É Telegram-–∞–∫–∫–∞—É–Ω—Ç—É
    bot.chat(messageText);
  }
});

function handleReturnCommand(username, commandParts) {
  if (commandParts.length !== 3) {
    bot.chat(`/m ${username} –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: -return <–Ω–∏–∫> <–∑–Ω–∞—á–µ–Ω–∏–µ>`);
    return;
  }

  const targetUsername = commandParts[1];
  const value = parseFloat(commandParts[2]);

  if (isNaN(value)) {
    bot.chat(`/m ${username} –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.`);
    return;
  }

  let playerLog = parkourLog.find(log => log.username.toLowerCase() === targetUsername.toLowerCase());

  if (!playerLog) {
    playerLog = { username: targetUsername, completions: 0, bestTime: 999.999, runes: 0, gamesPlayed: 0, maxScore: 0 };
    parkourLog.push(playerLog);
  }

  if (Number.isInteger(value)) {
    playerLog.completions = value;
    bot.chat(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–π –¥–ª—è ${playerLog.username} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ${value}.`);
  } else {
    playerLog.bestTime = value;
    bot.chat(`–õ—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è ${playerLog.username} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ${value.toFixed(3)} —Å–µ–∫—É–Ω–¥.`);
  }

  saveParkourLog(parkourLog);
}

const options = ['[1] - –î–∞', '[2] - –ù–µ—Ç'];
const lineNumbers = [5, 6];
const TOTAL_STICKS = 50;

function handleVote(username, message) {
    const args = message.split(' ');
    if (args.length !== 2 || isNaN(args[1])) {
        bot.chat('&c–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: -vote <–Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞>');
        return;
    }

    const voteOption = parseInt(args[1], 10);
    if (voteOption < 1 || voteOption > options.length) {
        bot.chat(`&c–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç 1 –¥–æ ${options.length}`);
        return;
    }

    fs.readFile(votesFilePath, 'utf8', (err, data) => {
        if (err) {
            console.error(err);
            return;
        }

        const fileLines = data.split('\n').filter(line => line.trim()); // –ß–∏—Ç–∞–µ–º –í–°–ï –≥–æ–ª–æ—Å–∞ –∏–∑ —Ñ–∞–π–ª–∞
        const allVotes = fileLines.map(line => {
            const [player, option, ...dateParts] = line.split(' ');
            return {
                player,
                option: parseInt(option, 10),
                date: dateParts.join(' ')
            };
        });

        const existingVoteIndex = allVotes.findIndex(vote => vote.player === username); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ —É–∂–µ –∏–≥—Ä–æ–∫
        if (existingVoteIndex >= 0) {
            bot.chat(`&c–í —ç—Ç–æ–º –æ–ø—Ä–æ—Å–µ –í—ã —É–∂–µ –æ—Ç–¥–∞–ª–∏ —Å–≤–æ–π –≥–æ–ª–æ—Å –∑–∞ ${allVotes[existingVoteIndex].option} –≤–∞—Ä–∏–∞–Ω—Ç`);
            return;
        }

        const voteDate = new Date().toLocaleDateString(); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≥–æ–ª–æ—Å
        const newVoteEntry = `${username} ${voteOption} ${voteDate}\n`;

        fs.appendFile(votesFilePath, newVoteEntry, (err) => {
            if (err) {
                console.error(err);
                return;
            }

            const updatedVotes = [...allVotes, { player: username, option: voteOption, date: voteDate }]; // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –≥–æ–ª–æ—Å–æ–≤
            updateHologram(updatedVotes); 
            
            console.log('votes:', updatedVotes.length); // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            console.log('file:', fileLines.join('\n') + '\n' + newVoteEntry.trim());
        });
    });
}

function updateHologram(votes) {
    const voteCounts = {}; // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞
    votes.forEach(vote => {
        voteCounts[vote.option] = (voteCounts[vote.option] || 0) + 1;
    });

    const totalVotes = votes.length;
    
    const sticks = distributeSticks(voteCounts, totalVotes); // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ª–æ—á–∫–∏

    options.forEach((option, index) => { // –û–±–Ω–æ–≤–ª—è–µ–º –≥–æ–ª–æ–≥—Ä–∞–º–º—É
        const optionNum = index + 1;
        const count = voteCounts[optionNum] || 0;
        const percentage = Math.round((count / totalVotes) * 100);
        const colored = sticks[index];
        const remaining = TOTAL_STICKS - colored;
        
        const message = `/holo line players ${lineNumbers[index]} &4&l${option} - &c${'|'.repeat(colored)}&8${'|'.repeat(remaining)} &4&l- ${count} [${percentage}%]`;
        bot.chat(message);
    });

    console.log('distribution votes:', voteCounts); // –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    console.log('distribution sticks:', sticks);
}

function distributeSticks(voteCounts, totalVotes) {
    if (totalVotes === 0) return new Array(options.length).fill(0);

    const exactSticks = options.map((_, index) => { // –í—ã—á–∏—Å–ª—è–µ–º —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ª–æ—á–µ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        const optionNum = index + 1;
        return (voteCounts[optionNum] || 0) / totalVotes * TOTAL_STICKS;
    });

    const sticks = exactSticks.map(Math.floor); // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª—ã–µ —á–∞—Å—Ç–∏
    let remainingSticks = TOTAL_STICKS - sticks.reduce((sum, s) => sum + s, 0);

    if (remainingSticks > 0) { // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–∞–ª–æ—á–∫–∏
        const fractions = exactSticks.map((exact, index) => ({
            index,
            fraction: exact - sticks[index]
        }));

        fractions.sort((a, b) => b.fraction - a.fraction); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –¥—Ä–æ–±–Ω–æ–π —á–∞—Å—Ç–∏

        for (let i = 0; i < remainingSticks; i++) { // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–π –ø–∞–ª–æ—á–∫–µ –∫ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π –¥—Ä–æ–±–Ω–æ–π —á–∞—Å—Ç—å—é
            sticks[fractions[i].index]++;
        }
    }

    return sticks;
}

async function getStatsTelegramUsers() {
  const chatIds = loadChatIds();
  const usernames = [];

  for (const chatId of chatIds) {
    try {
      const chat = await statsTelegramBot.getChat(chatId);
      if (chat.type === 'private') {
        const user = await statsTelegramBot.getChatMember(chatId, chatId);
        usernames.push(user.user.username || user.user.first_name);
      }
    } catch (error) {
      console.error(`Failed to get chat info for chatId ${chatId}:`, error);
    }
  }

  return usernames;
}

// sendLogMessage(`–û—à–∏–±–∫–∞: ${err.message}. #–æ—à–∏–±–∫–∏`);

const validRanks = [
  "–†—è–¥–æ–≤–æ–π", "–ï—Ñ—Ä–µ–π—Ç–æ—Ä", "–ú–ª. –°–µ—Ä–∂–∞–Ω—Ç", "–°–µ—Ä–∂–∞–Ω—Ç", "–°—Ç. –°–µ—Ä–∂–∞–Ω—Ç",
  "–ü—Ä–∞–ø–æ—Ä—â–∏–∫", "–°—Ç. –ü—Ä–∞–ø–æ—Ä—â–∏–∫", "–õ–µ–π—Ç–µ–Ω–∞–Ω—Ç", "–°—Ç. –õ–µ–π—Ç–µ–Ω–∞–Ω—Ç",
  "–ö–∞–ø–∏—Ç–∞–Ω", "–ú–∞–π–æ—Ä", "–ü–æ–¥–ø–æ–ª–∫–æ–≤–Ω–∏–∫", "–ü–æ–ª–∫–æ–≤–Ω–∏–∫", "–ì–µ–Ω–µ—Ä–∞–ª",
  "–ú–∞—Ä—à–∞–ª", "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä", "YouTube"
];

bot.on('message', async (jsonMsg) => {
  const msg = jsonMsg.toString();
  if (!/[^\s]/.test(msg)) return;
  if (ignoredMessages.some(word => msg.includes(word))) {
    return;
  }
  telegramBot.sendMessage(chatId, `${msg}`);
  const parts = msg.split(' ');

  if (parts.length < 5) return;

  const chatType = parts[0].slice(1, 3);

  const clanOrRank = parts[2].slice(1, -1);
  let clan;
  let donate;
  let username;
  let message;
  if (validRanks.includes(clanOrRank)) {
    clan = undefined;
    donate = clanOrRank;
    username = parts[3].split(':')[0];
    message = parts.slice(4).join(' ');
  } else {
    const donateOrClan = parts[3].slice(1, -1);
    clan = clanOrRank;
    donate = donateOrClan;
    username = parts[4].split(':')[0];
    message = parts.slice(5).join(' ');
  }

  if (blacklistedPlayers.includes(username)) {
    return;
  }

  const commandParts = message.toLowerCase().split(' ');
  const command = commandParts[0];

  if (developers.includes(username)) {
    switch (command) {
      case '-here':
        bot.chat('–¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É—é—Å—å –∫ –í–∞–º, –º–æ–π –≥–æ—Å–ø–æ–¥–∏–Ω');
        bot.chat('/tpa _Morkovka_');
        break;
      case '-survival':
        bot.chat('–ü–µ—Ä–µ—Ö–æ–∂—É –Ω–∞ —Ä–µ–∂–∏–º –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–∂–∏–≤–∞–Ω–∏—è, –í–∞—à–µ –ú–æ—Ä–∫–≤–æ—á–µ—Å—Ç–≤–æ');
        bot.chat('/Survival');
        break;
      case '-holo1':
        bot.chat('/holo line stats 8 &2(c) &amillkun &2- –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–±–±–∏ &a_Morkovka_');
        break;
      case '-holo2':
        bot.chat('/holo line runs 8 &2(c) &amillkun &2- –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–±–±–∏ &a_Morkovka_');
        break;
      case '-holo3':
        bot.chat('/holo line combination 4 &2(c) &amillkun &2- –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–±–±–∏ &a_Morkovka_');
        break;
      case '-holo4':
        bot.chat('/holo line players 1 &a&l-=-=-=-=-=-=- &e&l–ú&6&l–µ&e&l–Ω&6&l—é &a&l-=-=-=-=-=-=-');
        break;
      case '-updatevotes':
        fs.readFile(votesFilePath, 'utf8', (err, data) => {
            if (err) {
                console.error(err);
                bot.chat('&c–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –≥–æ–ª–æ—Å–æ–≤');
                return;
            }
            const fileLines = data.split('\n').filter(line => line.trim());
            const allVotes = fileLines.map(line => {
                const [player, option, ...dateParts] = line.split(' ');
                return {
                    player,
                    option: parseInt(option, 10),
                    date: dateParts.join(' ')
                };
            });
            updateHologram(allVotes);
            bot.chat('&2–ì–æ–ª–æ–≥—Ä–∞–º–º–∞ —Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
        });
        break;
      case '-return':
        if (commandParts.length !== 3) {
            bot.chat(`/m ${username} –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: -return <–Ω–∏–∫> <–∑–Ω–∞—á–µ–Ω–∏–µ>`);
            return;
        }
        
        const targetUsername = commandParts[1];
        const value = parseFloat(commandParts[2]);
        
        if (isNaN(value)) {
            bot.chat(`/m ${username} –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.`);
            return;
        }
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
            const playerResult = await APIClient.getPlayer(targetUsername);
            if (playerResult.success && playerResult.data) {
                if (Number.isInteger(value)) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–π
                    await APIClient.updateParkour(targetUsername, value - playerResult.data.parkour_completions, playerResult.data.parkour_best_time);
                    bot.chat(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–π –¥–ª—è ${targetUsername} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ${value}.`);
                } else {
                    // –û–±–Ω–æ–≤–ª—è–µ–º –ª—É—á—à–µ–µ –≤—Ä–µ–º—è
                    await APIClient.updateParkour(targetUsername, 0, value);
                    bot.chat(`–õ—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è ${targetUsername} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ${value.toFixed(3)} —Å–µ–∫—É–Ω–¥.`);
                }
            } else {
                bot.chat(`/m ${username} –ò–≥—Ä–æ–∫ ${targetUsername} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
            }
        } catch (error) {
            console.error('Error in -return command:', error);
            bot.chat(`/m ${username} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.`);
        }
        break;
      case '-dis':
        bot.chat('/dis Armor_Stand setNoBasePlate setShowArms setSprinting setLeftArm 297,31,0 setRightArm 299,320,0 setItemInMainHand 391');
        break;
      case '-und':
        bot.chat('/und');
        break;
      case '-accept':
        bot.chat('/rg accept');
        break;
      case '-reload':
        bot.chat('/hub');
        setTimeout(() => {
          bot.chat(`/swarp morkovka935bot`);
        }, 5000);
        break;
      case '-stats':
        bot.chat('–í—ã–≤–µ–ª –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å, —Ö–æ–∑—è–∏–Ω');
        console.log('Parkour Statistics:');
        const totalPlayers = parkourLog.length;
        const totalCompletions = parkourLog.reduce((sum, log) => sum + log.completions, 0);
        const totalRunes = parkourLog.reduce((sum, log) => sum + log.runes, 0);
        console.log(`Total players: ${totalPlayers}`);
        console.log(`Total completions: ${totalCompletions}`);
        console.log(`Total runes: ${totalRunes}`);
        parkourLog.forEach(log => {
          console.log(`${log.username}: ${log.completions} completions, best time: ${log.bestTime.toFixed(2)} seconds, runes: ${log.runes}, games played: ${log.gamesPlayed}, max score: ${log.maxScore}`);
        });
        break;
      case '-runa':
        if (commandParts.length !== 3) {
            bot.chat(`&4–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: -runa <–Ω–∏–∫> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>`);
            return;
        }
        
        const runaTargetUsername = commandParts[1];
        let runaAmount = parseInt(commandParts[2], 10);
        
        if (isNaN(runaAmount)) {
            bot.chat(`&4–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–Ω –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º`);
            return;
        }
        
        try {
            await APIClient.updateCoins(runaTargetUsername, runaAmount, 'add');
            bot.chat(`–ë–∞–ª–∞–Ω—Å —Ä—É–Ω –∏–≥—Ä–æ–∫–∞ &c&l${runaTargetUsername} &f–∏–∑–º–µ–Ω–µ–Ω –Ω–∞ &e${runaAmount}&4„Å≤`);
        } catch (error) {
            console.error('Error in -runa command:', error);
            bot.chat('&4–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ —Ä—É–Ω');
        }
        break;
      case '-tpon':
        teleportMode = true;
        bot.chat('–†–µ–∂–∏–º —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω');
        break;
      case '-tpoff':
        teleportMode = false;
        bot.chat('–†–µ–∂–∏–º —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏ –≤—ã–∫–ª—é—á–µ–Ω');
        break;
      case '-update':
        sendNotificationToAllUsers('–Ø –æ–±–Ω–æ–≤–∏–ª —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞, –ø–æ—ç—Ç–æ–º—É –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –î–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ /Start');
        break;
      case '-statstelegram':
        getStatsTelegramUsers().then(usernames => {
          const message = `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π statsTelegramBot: ${usernames.length}\n–°–ø–∏—Å–æ–∫ –∏–º—ë–Ω: ${usernames.join(', ')}`;
          sendLogMessage(message);
        }).catch(err => {
          console.error('Error getting statsTelegram users:', err);
          sendLogMessage('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π statsTelegramBot.');
        });
        break;
    }
  }

  switch (command) {
    case '-?':
      bot.chat(`–Ø - –±–æ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞—Ñ–∫-–ª–æ–±–±–∏. –í —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ &f&lTeslaHubStatsBot &f–µ—Å—Ç—å 5 —Ç–æ–ø–æ–≤ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤. –í–∞—Ä–ø - afk`);
      sendLogMessage(`–ò–≥—Ä–æ–∫ ${username} –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É -?. #–∫–æ–º–∞–Ω–¥–∞`);
      break;
    case '-–∏—Ñ–¥':
    case '-bal':
      let targetUsername;
      if (commandParts.length === 1) {
          targetUsername = username;
      } else {
          targetUsername = commandParts[1];
      }
      
      try {
          const result = await APIClient.getPlayer(targetUsername);
          if (result.success && result.data) {
              bot.chat(`–ë–∞–ª–∞–Ω—Å —Ä—É–Ω –∏–≥—Ä–æ–∫–∞ &c&l${result.data.player_nick}&f: &e${result.data.coins || 0}&4„Å≤`);
          } else {
              bot.chat(`&4–ò–≥—Ä–æ–∫ &c&l${targetUsername} &4–Ω–µ –Ω–∞–π–¥–µ–Ω`);
          }
      } catch (error) {
          console.error('Error getting player balance:', error);
          bot.chat('&c–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞');
      }
      sendLogMessage(`–ò–≥—Ä–æ–∫ ${username} –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É -bal. #–∫–æ–º–∞–Ω–¥–∞`);
      break;
    case '-tg':
      bot.chat('5 –ø–æ–ª–Ω—ã—Ö —Ç–æ–ø–æ–≤ —Å–æ –≤—Å–µ–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏, –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ &n—Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ&r &e&lTeslaHubStatsBot')
      sendLogMessage(`–ò–≥—Ä–æ–∫ ${username} –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É -tg. #–∫–æ–º–∞–Ω–¥–∞`);
      break;
    case '-—Ç–æ–ø':
    case '-top':
        try {
            const playerNick = username;
            const result = await APIClient.getPlayer(playerNick);
            
            if (result.success && result.data) {
                // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø—ã —á–µ—Ä–µ–∑ API
                const [timeResult, completionsResult, scoreResult, gamesResult, coinsResult] = await Promise.all([
                    APIClient.getTopTime(1000),
                    APIClient.getTopScore(1000),
                    APIClient.getStats()
                ]);
                
                if (timeResult.success && completionsResult.success && scoreResult.success && gamesResult.success && coinsResult.success) {
                    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–æ–ø–∞x
                    const timeRank = timeResult.data.findIndex(log => log.username === playerNick) + 1;
                    const completionsRank = completionsResult.data.findIndex(log => log.username === playerNick) + 1;
                    const scoreRank = scoreResult.data.findIndex(log => log.username === playerNick) + 1;
                    
                    bot.chat(`&b–í–∞—à–∏ —Ç–æ–ø—ã: &e–º–∏–Ω–∏-–ø–∞—Ä–∫—É—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏ - &a&l${timeRank || 'N/A'}&e, –º–∏–Ω–∏-–ø–∞—Ä–∫—É—Ä –ø–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è–º - &a&l${completionsRank || 'N/A'}&e, –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –ø–æ –æ—á–∫–∞–º - &a&l${scoreRank || 'N/A'}`);
                }
            } else {
                bot.chat(`&c–ò–≥—Ä–æ–∫ ${playerNick} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –∏–≥—Ä–æ–∫–æ–≤.`);
            }
        } catch (error) {
            console.error('Error getting top stats:', error);
            bot.chat('&c–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        }
        sendLogMessage(`–ò–≥—Ä–æ–∫ ${username} –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É -top. #–∫–æ–º–∞–Ω–¥–∞`);
        break;
    case '-cmd':
      bot.chat(`–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: -bal - —É–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç, -top - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –º–µ—Å—Ç–∞ –≤ —Ç–æ–ø–∞—Ö, -tg - —É–∑–Ω–∞—Ç—å –Ω–∏–∫ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ —Å –ø–æ–ª–Ω—ã–º–∏ —Ç–æ–ø–∞–º–∏`);
      sendLogMessage(`–ò–≥—Ä–æ–∫ ${username} –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É -cmd. #–∫–æ–º–∞–Ω–¥–∞`);
      break;
    case '-sun':
      bot.chat('/sun');
      sendLogMessage(`–ò–≥—Ä–æ–∫ ${username} –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É -sun. #–∫–æ–º–∞–Ω–¥–∞`);
      break;
    case '-rain':
      bot.chat('/rain');
      sendLogMessage(`–ò–≥—Ä–æ–∫ ${username} –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É -rain. #–∫–æ–º–∞–Ω–¥–∞`);
      break;
    case '-–º—â–µ—É':
    case '-vote':
      handleVote(username, message);
      sendLogMessage(`–ò–≥—Ä–æ–∫ ${username} –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É -vote. #–∫–æ–º–∞–Ω–¥–∞`);
      break;
    case '-–ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å':
    case '-offer':
      if (commandParts.length < 2) {
        bot.chat(`&c–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: -offer <–≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ>`);
        return;
      }
      const offerText = message.substring(commandParts[0].length + 1);
      sendLogMessage(`${username} -> ${offerText}. #–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è`);
      bot.chat(`&2–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–≥—Ä–æ–∫–∞ &c&l${username} &2–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É. –°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!`);
      break;
  }
});

let lastRegisteredPlayer = null;
let totalPlayersCount = 0;

async function updatePlayersHologram() { 
  try {
      const statsResult = await APIClient.getStats();
      if (statsResult.success) {
          bot.chat(`/holo line players 3 &b–í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: &4&l${statsResult.data.total_players}`);
          sendLogMessage('–¢–æ–ø –ø–æ –Ω–æ–≤—ã–º –∏–≥—Ä–æ–∫–∞–º –æ–±–Ω–æ–≤–∏–ª—Å—è. #—Ç–æ–ø');
      }
  } catch (error) {
      console.error('Error updating players hologram:', error);
  }
}

bot.on('error', (err) => {
  console.error('Error:', err);
  sendLogMessage(`–û—à–∏–±–∫–∞: ${err.message}. #–æ—à–∏–±–∫–∏`);
  process.exit(1); 
});

bot.on('end', () => {
  console.log('Bot has disconnected.');
  sendLogMessage('–ë–æ—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞. #–æ—à–∏–±–∫–∏');
  process.exit(1); 
});

function sendTopInParts(chatId, title, players, formatLine) {
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
  statsTelegramBot.sendMessage(chatId, title, { parse_mode: 'Markdown' });

  // –†–∞–∑–±–∏–≤–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 100
  const chunkSize = 100;
  for (let i = 0; i < players.length; i += chunkSize) {
    const chunk = players.slice(i, i + chunkSize);
    const message = chunk.map((log, index) => formatLine(log, i + index)).join('\n');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å —Ç–æ–ø–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    setTimeout(() => {
      statsTelegramBot.sendMessage(chatId, message);
    }, 150 * (i / chunkSize)); // –ó–∞–¥–µ—Ä–∂–∫–∞ 150 –º—Å –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
  }
}

statsTelegramBot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  statsTelegramBot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', {
    reply_markup: {
      keyboard: [
        ['[–ú–∏–Ω–∏-–ø–∞—Ä–∫—É—Ä] –¢–æ–ø –ø–æ –≤—Ä–µ–º–µ–Ω–∏'],
        ['[–ú–∏–Ω–∏-–ø–∞—Ä–∫—É—Ä] –¢–æ–ø –ø–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è–º'],
        ['[–ö–æ–º–±–∏–Ω–∞—Ü–∏—è] –¢–æ–ø –ø–æ –æ—á–∫–∞–º'],
        ['[–ö–æ–º–±–∏–Ω–∞—Ü–∏—è] –¢–æ–ø –ø–æ —Ä–∞—É–Ω–¥–∞–º'],
        ['[–ê—Ñ–∫-–õ–æ–±–±–∏] –¢–æ–ø –ø–æ —Ä—É–Ω–∞–º'],
        ['[–ê—Ñ–∫-–õ–æ–±–±–∏] –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
        ['[–ê—Ñ–∫-–õ–æ–±–±–∏] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞']
      ],
      resize_keyboard: true,
      one_time_keyboard: true
    }
  });
});

const chatIdsFilePath = path.join(__dirname, 'chat_ids.json');

function loadChatIds() {
  if (fs.existsSync(chatIdsFilePath)) {
    const data = fs.readFileSync(chatIdsFilePath, 'utf-8');
    return JSON.parse(data);
  }
  return [];
}

function saveChatIds(chatIds) {
  const data = JSON.stringify(chatIds, null, 2);
  fs.writeFileSync(chatIdsFilePath, data);
}

let chatIds = loadChatIds();

statsTelegramBot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  if (!chatIds.includes(chatId)) {
    chatIds.push(chatId);
    saveChatIds(chatIds);
  }
  const messageText = msg.text;

  switch (messageText) {
    case '[–ú–∏–Ω–∏-–ø–∞—Ä–∫—É—Ä] –¢–æ–ø –ø–æ –≤—Ä–µ–º–µ–Ω–∏':
      const timeResult = await APIClient.getTopTime(1000);
      if (timeResult.success) {
          sendTopInParts(chatId, '*–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–ª—É—á—à–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –º–∏–Ω–∏-–ø–∞—Ä–∫—É—Ä–∞):*', 
              timeResult.data, (log, index) => `${index + 1}. ${log.username} - ${log.best_time.toFixed(2)} —Å–µ–∫`);
      }
      break;
    case '[–ú–∏–Ω–∏-–ø–∞—Ä–∫—É—Ä] –¢–æ–ø –ø–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è–º':
      const topPlayersByCompletions = parkourLog
        .sort((a, b) => b.completions - a.completions);
      sendTopInParts(chatId, '*–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è–º –º–∏–Ω–∏-–ø–∞—Ä–∫—É—Ä–∞:*', 
        topPlayersByCompletions, (log, index) => `${index + 1}. ${log.username} - ${log.completions} –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–π`);
      break;
    case '[–ö–æ–º–±–∏–Ω–∞—Ü–∏—è] –¢–æ–ø –ø–æ –æ—á–∫–∞–º':
      const topPlayersByMaxScore = parkourLog
        .sort((a, b) => b.maxScore - a.maxScore);
      sendTopInParts(chatId, '*–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –æ—á–∫–∞–º (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –≤ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏):*', 
        topPlayersByMaxScore, (log, index) => `${index + 1}. ${log.username} - ${log.maxScore} –æ—á–∫–æ–≤`);
      break;
    case '[–ö–æ–º–±–∏–Ω–∞—Ü–∏—è] –¢–æ–ø –ø–æ —Ä–∞—É–Ω–¥–∞–º':
      const topPlayersByGamesPlayed = parkourLog
        .sort((a, b) => b.gamesPlayed - a.gamesPlayed);
      sendTopInParts(chatId, '*–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Ä–∞—É–Ω–¥–∞–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏:*', 
        topPlayersByGamesPlayed, (log, index) => `${index + 1}. ${log.username} - ${log.gamesPlayed} —Ä–∞—É–Ω–¥–æ–≤`);
      break;
    case '[–ê—Ñ–∫-–õ–æ–±–±–∏] –¢–æ–ø –ø–æ —Ä—É–Ω–∞–º':
      const topPlayersByRunes = parkourLog
        .sort((a, b) => b.runes - a.runes);
      sendTopInParts(chatId, '*–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä—É–Ω:*', 
        topPlayersByRunes, (log, index) => `${index + 1}. ${log.username} - ${log.runes} —Ä—É–Ω`);
      break;
    case '[–ê—Ñ–∫-–õ–æ–±–±–∏] –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
      const totalPlayers = parkourLog.length;
      const totalCompletions = parkourLog.reduce((sum, log) => sum + log.completions, 0);
      const totalRunes = parkourLog.reduce((sum, log) => sum + log.runes, 0);
      const totalGamesPlayed = parkourLog.reduce((sum, log) => sum + log.gamesPlayed, 0);
      statsTelegramBot.sendMessage(chatId, `*–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤: ${totalPlayers}\n–°—É–º–º–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–π: ${totalCompletions}\n–°—É–º–º–∞ –≤—Å–µ—Ö —Ä—É–Ω: ${totalRunes}\n–°—É–º–º–∞ –≤—Å–µ—Ö —Ä–∞—É–Ω–¥–æ–≤ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏: ${totalGamesPlayed}`, { parse_mode: 'Markdown' });
      break;
    case '[–ê—Ñ–∫-–õ–æ–±–±–∏] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞':
      statsTelegramBot.sendMessage(chatId, '*–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –∏–≥—Ä–æ–∫–∞:*', { parse_mode: 'Markdown' });
      statsTelegramBot.once('message', (msg) => {
        const playerNick = msg.text;
        let playerLog = parkourLog.find(log => log.username.toLowerCase() === playerNick.toLowerCase());
        if (playerLog) {
          const playerStats = `*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ ${playerLog.username}:*\n–ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–π –ø–∞—Ä–∫—É—Ä–∞: *${playerLog.completions}*\n–õ—É—á—à–µ–µ –≤—Ä–µ–º—è –ø–∞—Ä–∫—É—Ä–∞: *${playerLog.bestTime.toFixed(2)}* —Å–µ–∫—É–Ω–¥\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–Ω: *${playerLog.runes}*\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤ –≤ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é: *${playerLog.gamesPlayed}*\n–õ—É—á—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –≤ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏: *${playerLog.maxScore}*`;
          statsTelegramBot.sendMessage(chatId, playerStats, { parse_mode: 'Markdown' });

          const timeRank = parkourLog.sort((a, b) => a.bestTime - b.bestTime).findIndex(log => log.username === playerLog.username) + 1;
          const completionsRank = parkourLog.sort((a, b) => b.completions - a.completions).findIndex(log => log.username === playerLog.username) + 1;
          const maxScoreRank = parkourLog.sort((a, b) => b.maxScore - a.maxScore).findIndex(log => log.username === playerLog.username) + 1;
          const gamesPlayedRank = parkourLog.sort((a, b) => b.gamesPlayed - a.gamesPlayed).findIndex(log => log.username === playerLog.username) + 1;
          const runesRank = parkourLog.sort((a, b) => b.runes - a.runes).findIndex(log => log.username === playerLog.username) + 1;

          const ranksMessage = `*–ú–µ—Å—Ç–∞ –≤ —Ç–æ–ø–∞—Ö:*\n–ü–æ –≤—Ä–µ–º–µ–Ω–∏ –º–∏–Ω–∏-–ø–∞—Ä–∫—É—Ä–∞: *${timeRank}*\n–ü–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è–º –º–∏–Ω–∏-–ø–∞—Ä–∫—É—Ä–∞: *${completionsRank}*\n–ü–æ –æ—á–∫–∞–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏: *${maxScoreRank}*\n–ü–æ —Ä–∞—É–Ω–¥–∞–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏: *${gamesPlayedRank}*\n–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä—É–Ω: *${runesRank}*`;
          statsTelegramBot.sendMessage(chatId, ranksMessage, { parse_mode: 'Markdown' });
        } else {
          statsTelegramBot.sendMessage(chatId, '*–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω*', { parse_mode: 'Markdown' });
        }
      });
      break;
  }
});

function sendNotificationToAllUsers(message) {
  const chatIds = loadChatIds();
  chatIds.forEach(chatId => {
    statsTelegramBot.sendMessage(chatId, message).catch(error => {
      console.error(`Failed to send message to chatId ${chatId}:`, error);
    });
  });
}
