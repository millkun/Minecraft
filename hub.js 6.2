const mineflayer = require('mineflayer');
const { pathfinder, Movements, goals } = require('mineflayer-pathfinder');
const fs = require('fs');
const path = require('path');
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const { v4: uuidv4 } = require('uuid');
const https = require('https');

process.env.NODE_EXTRA_CA_CERTS = path.resolve(__dirname, 'dir', 'with', 'certs');
process.env.NODE_TLS_REJECT_UNAUTHORIZED = '1';

const bot = mineflayer.createBot({
  host: 'PLAY.TESLACRAFT.ORG',
  port: 25565,
  username: 'Morkovka935',
  timeout: 240000
});

bot.loadPlugin(pathfinder);

const developerNick = '_Morkovka_';
const logFilePath = path.join(__dirname, 'parkour_log.txt');

// Координаты паркура
const parkourPoints = [
  { x: 2110.5, y: 206.5, z: 6843.5 }, // Начало паркура
  { x: 2103.5, y: 206.5, z: 6841.5 }, // 2
  { x: 2097.5, y: 208.5, z: 6842.5 }, // 3
  { x: 2094.5, y: 209.5, z: 6843.5 }, // 4
  { x: 2092.5, y: 210.5, z: 6846.5 }, // 5
  { x: 2091.5, y: 210.5, z: 6849.5 }, // 6
  { x: 2092.5, y: 210.5, z: 6853.5 }, // 7
  { x: 2096.5, y: 210.5, z: 6860.5 }, // 8
  { x: 2102.5, y: 193.5, z: 6867.5 }, // 9
  { x: 2109.5, y: 193.5, z: 6870.5 }, // 10
  { x: 2116.5, y: 193.5, z: 6867.5 }, // 11
  { x: 2115.5, y: 193.5, z: 6863.5 }, // 12
  { x: 2116.5, y: 193.5, z: 6860.5 }, // 13
  { x: 2117.5, y: 191.5, z: 6858.5 }, // 14
  { x: 2118.5, y: 191.5, z: 6854.5 }, // 15
  { x: 2117.5, y: 192.5, z: 6851.5 }, // 16
  { x: 2112.5, y: 194.5, z: 6848.5 }, // 17
  { x: 2110.5, y: 195.5, z: 6850.5 }, // 18
  { x: 2109.5, y: 194.5, z: 6858.5 }, // 19
  { x: 2104.5, y: 196.5, z: 6860.5 }, // 20
  { x: 2104.5, y: 196.5, z: 6860.5 } // Конец паркура
];

// Структура для отслеживания прогресса игроков
const playerProgress = {};

// Игроки рядом с ботом
const playersNearBot = new Set();

// Флаги для отслеживания использования читов
const cheatFlags = {};
const playerLastPosition = {};
const playerLastTime = {};

// Функция для загрузки данных из лог-файла
function loadParkourLog() {
  if (fs.existsSync(logFilePath)) {
    const data = fs.readFileSync(logFilePath, 'utf-8');
    return data.split(' \n').map(line => line.trim()).filter(line => line).map(line => {
      const [username, completions, bestTime, runes, gamesPlayed, maxScore] = line.split(' ');
      return { username, completions: parseInt(completions, 10), bestTime: parseFloat(bestTime), runes: parseInt(runes, 10), gamesPlayed: parseInt(gamesPlayed, 10), maxScore: parseInt(maxScore, 10) };
    });
  }
  return [];
}

// Функция для сохранения данных в лог-файл
function saveParkourLog(logData) {
  const data = logData.map(entry => `${entry.username} ${entry.completions} ${entry.bestTime} ${entry.runes} ${entry.gamesPlayed} ${entry.maxScore}`).join(' \n');
  fs.writeFileSync(logFilePath, data);
}

let parkourLog = loadParkourLog();

// Инициализация Telegram бота для логов
const telegramToken = '7800594114:AAFt78t1RgkAPrfES9sMZ5wMVO2rXqbPwZw';
const telegramBot = new TelegramBot(telegramToken, { polling: true });
const chatId = '945518256'; // ID чата, в который будут отправляться сообщения

// Инициализация Telegram бота для статистики
const statsTelegramToken = '8062737152:AAE1zN4wSNrp0MTz1ptXmeTGwqXYasqSYak';
const statsTelegramBot = new TelegramBot(statsTelegramToken, { polling: true });

// Функция для получения Access token для GigaChat
async function getAccessToken(authorizationKey) {
  const rqUID = uuidv4();
  const url = 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth';
  const headers = {
    'Content-Type': 'application/x-www-form-urlencoded',
    'Accept': 'application/json',
    'RqUID': rqUID,
    'Authorization': `Basic ${authorizationKey}`
  };
  const data = 'scope=GIGACHAT_API_PERS';

  // Используем https.Agent для проверки сертификата с помощью chain.pem
  const httpsAgent = new https.Agent({
    ca: fs.readFileSync('chain.pem') // Убедитесь, что файл chain.pem находится в правильной директории
  });

  try {
    const response = await axios.post(url, data, { headers, httpsAgent });
    return response.data.access_token;
  } catch (error) {
    console.error('Error getting access token:', error);
    throw error;
  }
}

// Функция для отправки запроса к GigaChat API
async function sendGigaChatRequest(accessToken, prompt) {
  const url = 'https://gigachat.devices.sberbank.ru/api/v1/models';
  const headers = {
    'Content-Type': 'application/json',
    'Accept': 'application/json',
    'Authorization': `Bearer ${accessToken}`
  };
  const data = {
    model: "GigaChat", // или "GigaChat-Pro", "GigaChat-Plus"
    messages: [{ role: 'user', content: prompt }],
    temperature: 1,
    top_p: 0.1,
    n: 1,
    stream: false,
    max_tokens: 512,
    repetition_penalty: 1
  };

  // Используем https.Agent для проверки сертификата с помощью chain.pem
  const httpsAgent = new https.Agent({
    ca: fs.readFileSync('chain.pem') // Убедитесь, что файл chain.pem находится в правильной директории
  });

  try {
    const response = await axios.post(url, data, { headers, httpsAgent });
    return response.data.choices[0].message.content;
  } catch (error) {
    console.error('Error sending request to GigaChat API:', error);
    throw error;
  }
}

// Функция для получения ответа от GigaChat
async function getGPTResponse(prompt) {
  const authorizationKey = 'ZGEwYTdkNmItYjVmYi00MjlhLWI5YTUtZGE0NmJkODc0NjQ1OmNiM2YyYWM5LTY5OGYtNGVjNy05ZDJkLTZkYTY4YzRmNDczMw=='; // Замените на ваш Authorization key
  try {
    const accessToken = await getAccessToken(authorizationKey);
    const response = await sendGigaChatRequest(accessToken, prompt);
    return response.slice(0, 100); // Ограничиваем длину ответа до 100 символов
  } catch (error) {
    console.error('Error getting GPT response:', error);
    throw error;
  }
}

bot.once('spawn', function () {
  console.log('Bot has spawned');
  const defaultMove = new Movements(bot);
  bot.pathfinder.setMovements(defaultMove);

  function lookAtNearestPlayer() {
    const players = bot.players;
    let nearestPlayer = null;
    let nearestDistance = Infinity;

    for (const playerName in players) {
      if (playerName === bot.username) continue;
      const player = players[playerName];
      if (player.entity && player.entity.position) {
        const distance = bot.entity.position.distanceTo(player.entity.position);
        if (distance < nearestDistance && distance < 10) {
          nearestDistance = distance;
          nearestPlayer = player;
        }
      }
    }

    if (nearestPlayer) {
      const playerPosition = nearestPlayer.entity.position.offset(0, 1.62, 0);
      bot.lookAt(playerPosition);
    } else {
      bot.look(55, 0); // На восток
    }
  }

  setInterval(lookAtNearestPlayer, 10);

  setTimeout(() => {
    bot.chat(`/Survival`);
  }, 45000);
});


  // Функция для формирования и отправки топа игроков по времени
  function sendTopPlayersByTime() {
    const updatedLog = loadParkourLog(); // Загружаем актуальные данные из лог-файла
    const topPlayers = updatedLog
      .filter(log => log.bestTime < Infinity) // Убираем игроков без завершений
      .sort((a, b) => a.bestTime - b.bestTime) // Сортируем по времени
      .slice(0, 5); // Берем только топ-5

    if (topPlayers.length > 0) {
      topPlayers.forEach((log, index) => {
        const message = `${index + 2} &f${index + 1}. &c&l${log.username} &f[&4&l${log.completions}&f] - &e${log.bestTime.toFixed(2)} &fсекунд`;
        setTimeout(() => {
          bot.chat(`/holo line stats ${message}`);
        }, index * 1500); // Задержка в 1.5 секунды для каждого последующего сообщения
      });
      setTimeout(() => {
        bot.chat('/holo line stats 7 &6Обновление каждые &a10 минут&6, если бот онлайн');
      }, topPlayers.length * 1500); // Задержка в 1.5 секунды после последнего сообщения из топа
    } else {
      bot.chat('Произошла непредвиденая ошибка');
      telegramBot.sendMessage(chatId, 'Произошла непредвиденая ошибка при обновлении топа. #ошибки');
    }
  }

  function sendTopPlayersByMaxScore() {
    const updatedLog = loadParkourLog(); // Загружаем актуальные данные из лог-файла
    const topPlayers = updatedLog
      .sort((a, b) => b.maxScore - a.maxScore) // Сортируем по наивысшим очкам
      .slice(0, 5); // Берем только топ-5
  
    if (topPlayers.length > 0) {
      topPlayers.forEach((log, index) => {
        const message = `${index + 2} &f${index + 1}. &c&l${log.username} &f- &e${log.maxScore} &fочков`;
        setTimeout(() => {
          bot.chat(`/holo line runs ${message}`);
        }, index * 1500); // Задержка в 1.5 секунды для каждого последующего сообщения
      });
      setTimeout(() => {
        bot.chat('/holo line runs 7 &6Обновление каждые &a10 минут&6, если бот онлайн');
      }, topPlayers.length * 1500); // Задержка в 1.5 секунды после последнего сообщения из топа
    } else {
      bot.chat('Произошла непредвиденая ошибка');
      telegramBot.sendMessage(chatId, 'Произошла непредвиденая ошибка при обновлении топа. #ошибки');
    }
  }

  // Устанавливаем интервал для отправки топов каждые 5 минут
  let isTimeTop = true;
  setInterval(() => {
    if (isTimeTop) {
      sendTopPlayersByTime();
    } else {
      sendTopPlayersByMaxScore();
    }
    isTimeTop = !isTimeTop;
  }, 5 * 60 * 1000);

  // Устанавливаем интервал для отправки сообщения в чат каждые полчаса
  setInterval(() => {
    bot.chat('!&e&l/&6&lw&e&la&6&lr&e&lp &6&la&e&lf&6&lk &f&l- Интерактивное &c&lа&4&lф&c&lк&4&l-&c&lл&4&lо&c&lб&4&lб&c&lи');
    telegramBot.sendMessage(chatId, 'Агитационное сообщение отправлено. #агитация');
  }, 45 * 60 * 1000);

bot.on('playerJoined', (player) => {
  console.log(`${player.username} joined the server.`);
  playerProgress[player.username] = { currentPoint: 0, startTime: null };
  cheatFlags[player.username] = false; // Инициализация флага читов
  playerLastPosition[player.username] = null;
  playerLastTime[player.username] = null;
});

bot.on('entityMoved', (entity) => {
  if (entity.type === 'player' && entity.username) {
    const playerName = entity.username;
    const playerPos = entity.position;
    const distanceToBot = bot.entity.position.distanceTo(playerPos);
    let pastTime;

    if (distanceToBot < 100) {
      if (!playersNearBot.has(playerName)) {
        playersNearBot.add(playerName);
        telegramBot.sendMessage(chatId, `${playerName} зашёл в хаб. #онлайн`);
      }
    } else {
      if (playersNearBot.has(playerName)) {
        playersNearBot.delete(playerName);
        telegramBot.sendMessage(chatId, `${playerName} покинул хаб. #онлайн`);
      }
    }

    if (playerProgress[playerName]) {
      const currentPoint = playerProgress[playerName].currentPoint;
      const currentParkourPoint = parkourPoints[currentPoint];

      const distanceToPoint = playerPos.distanceTo(currentParkourPoint);
      const distanceToStart = playerPos.distanceTo(parkourPoints[0]);
      if (distanceToPoint < 1.5) { // Проверка на близость к точке
        if (currentPoint === 0 && playerProgress[playerName].startTime === null) {
          playerProgress[playerName].startTime = new Date();
        }
        if (currentPoint === 5 || currentPoint === 9 || currentPoint === 14) {
          playerLastTime[playerName] = new Date(); // Сохраняем время для игрока
        }
        if (currentPoint === 6 || currentPoint === 10 || currentPoint === 15) {
          if (playerLastTime[playerName]) {
            const timeDiff = (new Date() - playerLastTime[playerName]) / 1000;
            if (timeDiff > 0) { // Проверка на ноль
              let speed;
              let message;

              if (currentPoint === 6) {
                speed = 3.65 / timeDiff;
                message = `Player ${playerName} is cheating with speed hack at points 5-6. Speed: ${speed}`;
                if (speed > 7.61577) { // 6.222
                  console.log(message);
                  telegramBot.sendMessage(chatId, `${playerName} проходит паркур с ускорением на участке ${currentPoint - 1}-${currentPoint}. Скорость: ${speed}. #скорость`);
                }
              } else if (currentPoint === 10) {
                speed = 8.25 / timeDiff;
                message = `Player ${playerName} is cheating with speed hack at points 9-10. Speed: ${speed}`;
                if (speed > 7.61577) { // 6.644
                  console.log(message);
                  telegramBot.sendMessage(chatId, `${playerName} проходит паркур с ускорением на участке ${currentPoint - 1}-${currentPoint}. Скорость: ${speed}. #скорость`);
                }
              } else if (currentPoint === 15) {
                speed = 4.54 / timeDiff;
                message = `Player ${playerName} is cheating with speed hack at points 14-15. Speed: ${speed}`;
                if (speed > 11.5) {
                  console.log(message);
                  telegramBot.sendMessage(chatId, `${playerName} проходит паркур с ускорением на участке ${currentPoint - 1}-${currentPoint}. Скорость: ${speed}. #скорость`);
                }
              }
            } else {
              console.log("timeDiff is zero or negative, cannot calculate speed.");
            }
          } else {
            console.log("pastTime is not initialized for point ${currentPoint}");
          }
        }

        playerProgress[playerName].currentPoint++;
        console.log(`Player ${playerName} at point ${playerProgress[playerName].currentPoint}`);

        if (playerProgress[playerName].currentPoint === parkourPoints.length - 1) {
          const endTime = new Date();
          const timeTaken = (endTime - playerProgress[playerName].startTime) / 1000;
          console.log(`${playerName} completed the parkour in ${timeTaken} seconds!`);
          bot.chat(`&8-░-░-░-░-░-░-░-░-░-░-░-░-░-░- &6&l[&e&lАфк-Лобби&6&l] &a&l${playerName} &bпрошёл мини-паркур за &e${timeTaken.toFixed(2)} &bсекунд и получил &eひ&a199`);

          let playerLog = parkourLog.find(log => log.username === playerName);
          if (!playerLog) {
            playerLog = { username: playerName, completions: 0, bestTime: Infinity, runes: 0, gamesPlayed: 0, maxScore: 0 };
            parkourLog.push(playerLog);
          }
          playerLog.completions++;
          playerLog.runes += 199; // Добавляем руны за прохождение
          if (timeTaken < playerLog.bestTime) {
            playerLog.bestTime = timeTaken;
          }
          saveParkourLog(parkourLog);

          // Сброс прогресса после завершения паркура
          playerProgress[playerName].currentPoint = 0;
          playerProgress[playerName].startTime = null;
          console.log(`Progress reset after completion for ${playerName}`);

          // Отправка сообщения в Telegram
          telegramBot.sendMessage(chatId, `${playerName} прошёл паркур за ${timeTaken.toFixed(2)} секунд. #паркур`);
        }
      } else if (currentPoint !== 0 && currentPoint !== 1 && distanceToStart < 1.5) {
        // Сброс прогресса, если игрок пересекает стартовую точку
        playerProgress[playerName] = { currentPoint: 1, startTime: new Date() };
        console.log(`Progress deleted [start] for ${playerName}`);
      }
    }
  }
});

telegramBot.on('message', (msg) => {
  const chatId = msg.chat.id;
  const messageText = msg.text;
  bot.chat(messageText);
});

// Запись данных вручную
function handleReturnCommand(username, commandParts) {
  if (commandParts.length !== 3) {
    bot.chat(`/m ${username} Неверный формат команды. Используйте: -return <ник> <значение>`);
    return;
  }

  const targetUsername = commandParts[1];
  const value = parseFloat(commandParts[2]);

  if (isNaN(value)) {
    bot.chat(`/m ${username} Значение должно быть числом.`);
    return;
  }

  // Ищем игрока, игнорируя регистр
  let playerLog = parkourLog.find(log => log.username.toLowerCase() === targetUsername.toLowerCase());

  // Если игрок не найден, создаем новую запись
  if (!playerLog) {
    playerLog = { username: targetUsername, completions: 0, bestTime: Infinity, runes: 0, gamesPlayed: 0, maxScore: 0 };
    parkourLog.push(playerLog);
  }

  // Обновляем данные
  if (Number.isInteger(value)) {
    playerLog.completions = value;
    bot.chat(`/m ${username} Количество прохождений для ${playerLog.username} изменено на ${value}.`);
  } else {
    playerLog.bestTime = value;
    bot.chat(`/m ${username} Лучшее время для ${playerLog.username} изменено на ${value.toFixed(3)} секунд.`);
  }

  saveParkourLog(parkourLog);
}

// Функция для получения списка пользователей и их имён из statsTelegramBot
async function getStatsTelegramUsers() {
  const chatIds = loadChatIds();
  const usernames = [];

  for (const chatId of chatIds) {
    try {
      const chat = await statsTelegramBot.getChat(chatId);
      if (chat.type === 'private') {
        const user = await statsTelegramBot.getChatMember(chatId, chatId);
        usernames.push(user.user.username || user.user.first_name);
      }
    } catch (error) {
      console.error(`Failed to get chat info for chatId ${chatId}:`, error);
    }
  }

  return usernames;
}

function calculateHash(nick) {
  let hash = 0;
  for (let i = 0; i < nick.length; i++) {
    hash = hash * 31 + nick.charCodeAt(i);
  }
  return hash.toString(16); // Преобразуем в 16-ичный формат
}

// Переменные для мини-игры "комбинация"
let currentPlayer = null;
let currentCombination = [];
let currentRound = 1;
let inputTimeout = null;
let inputSequence = [];
let score = 0;

const buttonPositions = {
  1: { x: 2087, y: 216, z: 6871 },
  2: { x: 2087, y: 216, z: 6870 },
  3: { x: 2087, y: 216, z: 6869 },
  4: { x: 2087, y: 215, z: 6871 },
  5: { x: 2087, y: 215, z: 6870 },
  6: { x: 2087, y: 215, z: 6869 },
  7: { x: 2087, y: 214, z: 6871 },
  8: { x: 2087, y: 214, z: 6870 },
  9: { x: 2087, y: 214, z: 6869 }
};

bot.on('chat', (username, message) => {
  if (username === bot.username) return; // Игнорируем сообщения от самого бота

  // Убираем цветное форматирование из сообщения
  //const cleanMessage = removeColorFormatting(message);

  // Нормализуем сообщение, оставляя буквы, цифры и допустимые символы
  //const normalizedMessage = cleanMessage.replace(/[^a-zA-Z0-9а-яА-Я_~-]/g, '');

  console.log(`${username} -> ${message}`);
  telegramBot.sendMessage(chatId, `${username} -> ${message}`);

  const commandParts = message.toLowerCase().split(' ');
  const command = commandParts[0];

  if (username === developerNick) {
    switch (command) {
      case '-here':
        bot.chat('Телепортируюсь к Вам, мой господин');
        bot.chat('/tpa _Morkovka_');
        break;
      case '-survival':
        bot.chat('Перехожу на режим классического выживания, Ваше Морквочество');
        bot.chat('/Survival');
        break;
      case '-holo1':
        bot.chat('/holo line stats 8 &2(c) &amillkun &2- Разработчик лобби &a_Morkovka_');
        break;
      case '-holo2':
        bot.chat('/holo line runs 8 &2(c) &amillkun &2- Разработчик лобби &a_Morkovka_');
        break;
      case '-holo3':
        bot.chat('/holo line combination 4 &2(c) &amillkun &2- Разработчик лобби &a_Morkovka_');
        break;
      case '-return':
        handleReturnCommand(username, commandParts);
        break;
      case '-dis':
        bot.chat('/dis Armor_Stand setNoBasePlate setShowArms setSprinting setLeftArm 297,31,0 setRightArm 299,320,0 setItemInMainHand 391');
        break;
      case '-und':
        bot.chat('/und');
        break;
      case '-accept':
        bot.chat('/rg accept');
        break;
      case '-stats':
        bot.chat('Вывел полную статистику в консоль, хозяин');
        console.log('Parkour Statistics:');
        const totalPlayers = parkourLog.length;
        const totalCompletions = parkourLog.reduce((sum, log) => sum + log.completions, 0);
        const totalRunes = parkourLog.reduce((sum, log) => sum + log.runes, 0);
        console.log(`Total players: ${totalPlayers}`);
        console.log(`Total completions: ${totalCompletions}`);
        console.log(`Total runes: ${totalRunes}`);
        parkourLog.forEach(log => {
          console.log(`${log.username}: ${log.completions} completions, best time: ${log.bestTime.toFixed(2)} seconds, runes: ${log.runes}, games played: ${log.gamesPlayed}, max score: ${log.maxScore}`);
        });
        break;
      case '-runa':
        if (commandParts.length !== 3) {
          bot.chat(`&4Неверный формат команды. Используйте: -runa <ник> <количество>`);
          return;
        }
        const runaTargetUsername = commandParts[1];
        let runaAmount = parseInt(commandParts[2], 10);
        if (isNaN(runaAmount)) {
          bot.chat(`&4Количество рун должно быть числом`);
          return;
        }
        let runaPlayerLog = parkourLog.find(log => log.username.toLowerCase() === runaTargetUsername.toLowerCase());
        if (!runaPlayerLog) {
          runaPlayerLog = { username: runaTargetUsername, completions: 0, bestTime: Infinity, runes: 0, gamesPlayed: 0, maxScore: 0 };
          parkourLog.push(runaPlayerLog);
        }
        runaPlayerLog.runes += runaAmount;
        bot.chat(`Баланс рун игрока &c&l${runaPlayerLog.username} &fизменен на &e${runaAmount}&4ひ&f. Новый баланс: &e${runaPlayerLog.runes}&4ひ`);
        saveParkourLog(parkourLog);
        break;
      case '-gpt':
        if (commandParts.length < 2) {
          bot.chat(`/m ${username} Неверный формат команды. Используйте: -gpt <запрос>`);
          return;
        }
        const prompt = commandParts.slice(1).join(' ');
        getGPTResponse(prompt).then(response => {
          bot.chat(`/m ${username} Ответ: ${response}`);
        }).catch(err => {
          bot.chat(`/m ${username} Произошла ошибка при получении ответа от нейросети.`);
          console.error('Error:', err);
        });
        break;
      case '-update':
        sendNotificationToAllUsers('Пожалуйста, напишите /start, чтобы бот начал корректно работать после обновления.');
        break;
      case '-statstelegram':
        getStatsTelegramUsers().then(usernames => {
          const message = `Количество пользователей statsTelegramBot: ${usernames.length}\nСписок имён: ${usernames.join(', ')}`;
          telegramBot.sendMessage(chatId, message);
        }).catch(err => {
          console.error('Error getting statsTelegram users:', err);
          telegramBot.sendMessage(chatId, 'Произошла ошибка при получении списка пользователей statsTelegramBot.');
        });
        break;
      case '-hash':
        if (commandParts.length !== 2) {
          bot.chat(`Неверный формат команды. Используйте: -hash <ник>`);
          return;
        }
        const nick = commandParts[1];
        const hash = calculateHash(nick);
        bot.chat(`${hash}`);
        break;
    }
  }

  // Обработка команд для всех пользователей
  switch (command) {
    case '-?':
      bot.chat(`Я - бот интерактивного афк-лобби. В телеграм-боте &f&lTeslaHubStatsBot &fесть 5 топов всех игроков. Варп - afk`);
      break;
    case '-пфьу':
    case '-game':
      if (!currentPlayer) {
        currentPlayer = username;
        currentRound = 1;
        bot.chat(`/rg f combination use allow`);
        startNewRound();
      } else {
        bot.chat(`Игра уже началась. Подождите, пока текущий игрок закончит.`);
      }
      break;
    case '-bal':
      if (commandParts.length !== 2) {
        bot.chat(`&4Неверный формат команды. Используйте: -bal <ник>`);
        return;
      }
      const targetUsername = commandParts[1];
      let playerLog = parkourLog.find(log => log.username.toLowerCase() === targetUsername.toLowerCase());
      if (playerLog) {
        bot.chat(`Баланс рун игрока &c&l${playerLog.username}&f: &e${playerLog.runes}&4ひ`);
      } else {
        bot.chat(`&4Игрок &c&l${targetUsername} &4не найден`);
      }
      break;
  }
});

const buttonCooldown = 1010; // Время в миллисекундах, в течение которого игнорируются повторные нажатия
const lastButtonPressTime = {}; // Объект для хранения времени последнего нажатия каждой кнопки

bot.on('blockUpdate', (oldBlock, newBlock) => {
  if (newBlock.type === 77) { // 77 — это ID кнопки в Minecraft
    const buttonPosition = {
      x: Math.floor(newBlock.position.x),
      y: Math.floor(newBlock.position.y),
      z: Math.floor(newBlock.position.z)
    };
    const buttonNumber = Object.keys(buttonPositions).find(key => {
      const pos = buttonPositions[key];
      return pos.x === buttonPosition.x && pos.y === buttonPosition.y && pos.z === buttonPosition.z;
    });

    if (buttonNumber && currentPlayer) {
      const player = bot.players[currentPlayer]; // Получаем объект текущего игрока
      if (!player || !player.entity) {
        console.log('Current player not found or has no entity.');
        return;
      }

      const playerPosition = player.entity.position;
      const distance = playerPosition.distanceTo(buttonPosition);
      if (distance < 5) { // Проверяем, находится ли игрок рядом с кнопкой
        const currentTime = Date.now();
        // Проверяем, прошло ли достаточно времени с последнего нажатия
        if (!lastButtonPressTime[buttonNumber] || (currentTime - lastButtonPressTime[buttonNumber] > buttonCooldown)) {
          lastButtonPressTime[buttonNumber] = currentTime; // Обновляем время последнего нажатия
          console.log(`Button ${buttonNumber} pressed by ${currentPlayer}`);
          inputSequence.push(buttonNumber); // handleButtonPress(buttonNumber);
        }
      }
    }
  } else if (oldBlock.type === 77 && newBlock.type !== 77) {
    // Если кнопка была отпущена, ничего не делаем
    const buttonPosition = {
      x: Math.floor(oldBlock.position.x),
      y: Math.floor(oldBlock.position.y),
      z: Math.floor(oldBlock.position.z)
    };
    const buttonNumber = Object.keys(buttonPositions).find(key => {
      const pos = buttonPositions[key];
      return pos.x === buttonPosition.x && pos.y === buttonPosition.y && pos.z === buttonPosition.z;
    });

    if (buttonNumber) {
      // Здесь можно добавить логику для обработки отпускания кнопки, если это необходимо
    }
  }
});

function startNewRound() {
  currentCombination = generateCombination(currentRound + 2);
  console.log(`CurComb: ${currentCombination}`);
  showCombination();
}

function generateCombination(length) {
  const combination = [];
  let lastNumber = null;

  for (let i = 0; i < length; i++) {
    let newNumber;
    do {
      newNumber = Math.floor(Math.random() * 9) + 1;
    } while (newNumber === lastNumber);
    combination.push(newNumber);
    lastNumber = newNumber;
  }

  return combination;
}


function showCombination() {
  bot.chat(`/holo line combination 3 &fВвод: &4&lЗапрещён`);
  bot.chat(`/rg f combination use deny`);
  setTimeout(() => {
    bot.chat(`/holo line combination 2 &dТекущая комбинация: &f&l${currentCombination.join('')}`);
    setTimeout(() => {
      bot.chat(`/holo line combination 2 &dТекущая комбинация: &f.&f&k???&f.`);
      setTimeout(() => {
        bot.chat(`/holo line combination 3 &fВвод: &a&lРазрешён`);
        bot.chat(`/rg f combination use allow`);
        startInputPhase();
      }, 1500);
    }, 1000);
  }, 1500);
}

function startInputPhase() {
  inputSequence = [];
  const inputTime = 5000 + (currentRound - 1) * 500;
  inputTimeout = setTimeout(() => {
    console.log(`InputSequence: ${inputSequence.join('')}`); // Логируем текущее состояние ввода
    console.log(`CurrentCombination: ${currentCombination.join('')}`); // Логируем текущую комбинацию
    let playerLog = parkourLog.find(log => log.username === currentPlayer);
    if (!playerLog) {
      playerLog = { username: currentPlayer, completions: 0, bestTime: Infinity, runes: 0, gamesPlayed: 0, maxScore: 0 };
      parkourLog.push(playerLog);
    }
    const roundScore = calculateScore(inputSequence, currentCombination); // Подсчет очков за раунд
    console.log(`Round score: ${roundScore}`);
    score += roundScore; // Накапливаем очки
    console.log(`Score: ${score}`);
    if (score > playerLog.maxScore) {
      playerLog.maxScore = score;
      console.log(`New max score: ${roundScore}`);
    }
    saveParkourLog(parkourLog);
    if (inputSequence.length !== currentCombination.length || !arraysEqual(inputSequence, currentCombination)) {
      const currentRunes = (currentRound - 1) * 31;
      bot.chat(`&8-░-░-░-░-░-░-░-░-░-░-░-░-░-░- &6&l[&e&l/Warp afk&6&l] &a&l${currentPlayer} &bзаработал &e${score} &bочка(-ов) в комбинации и получил &eひ&a${currentRunes}`);
      telegramBot.sendMessage(chatId, `${currentPlayer} сыграл в комбинацию. Пройдено раундов - ${currentRound - 1}, Очки - ${score}. #комбинация`);
      resetGame();
      bot.chat(`/rg f combination use deny`);
    } else {
      console.log(`${currentPlayer} complete round ${currentRound}!`);
      playerLog.gamesPlayed++;
      playerLog.runes += 31; // Добавляем руны за раунд
      currentRound++;
      startNewRound();
    }
  }, inputTime);
}

function resetGame() {
  clearTimeout(inputTimeout);
  currentPlayer = null;
  currentCombination = [];
  currentRound = 1;
  inputSequence = [];
  score = 0;
}

function arraysEqual(arr1, arr2) {
  if (arr1.length !== arr2.length) return false;
  for (let i = 0; i < arr1.length; i++) {
    if (String(arr1[i]) !== String(arr2[i])) return false; // Приводим к строкам для сравнения
  }
  return true;
}

function calculateScore(arr1, arr2) {
  let score = 0; // Используем переменную score
  for (let i = 0; i < String(arr1).length; i++) {
    if (String(arr1[i]) === String(arr2[i])) {
      score++;
      // console.log(`arr1: ${String(arr1[i])}`);
      // console.log(`arr2: ${String(arr2[i])}`);
    } else {
      break;
    }
  }
  if (String(arr1).length === String(arr2).length && String(arr1) === String(arr2)) {
    score -= (currentRound + 1);
  }
  return score;
}

bot.on('error', (err) => {
  console.error('Error:', err);
  telegramBot.sendMessage(chatId, `Ошибка: ${err.message}. #ошибки`);
});

bot.on('end', () => {
  console.log('Bot has disconnected.');
  telegramBot.sendMessage(chatId, 'Бот отключился от сервера. #ошибки');
  // Попытка перезахода на сервер
  setTimeout(() => {
    bot.connect();
  }, 10000); // Повторный заход через 10 секунд
});

statsTelegramBot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  statsTelegramBot.sendMessage(chatId, 'Добро пожаловать! Выберите опцию:', {
    reply_markup: {
      keyboard: [
        ['[Мини-паркур] Топ по времени'],
        ['[Мини-паркур] Топ по прохождениям'],
        ['[Комбинация] Топ по очкам'],
        ['[Комбинация] Топ по раундам'],
        ['[Афк-Лобби] Топ по рунам'],
        ['[Афк-Лобби] Общая статистика'],
        ['[Афк-Лобби] Статистика игрока']
      ],
      resize_keyboard: true,
      one_time_keyboard: true
    }
  });
});

const chatIdsFilePath = path.join(__dirname, 'chat_ids.json');

// Функция для загрузки идентификаторов чатов из файла
function loadChatIds() {
  if (fs.existsSync(chatIdsFilePath)) {
    const data = fs.readFileSync(chatIdsFilePath, 'utf-8');
    return JSON.parse(data);
  }
  return [];
}

// Функция для сохранения идентификаторов чатов в файл
function saveChatIds(chatIds) {
  const data = JSON.stringify(chatIds, null, 2);
  fs.writeFileSync(chatIdsFilePath, data);
}

let chatIds = loadChatIds();

// Обработчик сообщений для сохранения новых идентификаторов чатов
statsTelegramBot.on('message', (msg) => {
  const chatId = msg.chat.id;
  if (!chatIds.includes(chatId)) {
    chatIds.push(chatId);
    saveChatIds(chatIds);
  }
  const messageText = msg.text;

  switch (messageText) {
    case '[Мини-паркур] Топ по времени':
      const topPlayersByTime = parkourLog
        .filter(log => log.bestTime < Infinity)
        .sort((a, b) => a.bestTime - b.bestTime);
      const timeMessage = topPlayersByTime.map((log, index) => `${index + 1}. ${log.username} - ${log.bestTime.toFixed(2)} секунд`).join('\n');
      statsTelegramBot.sendMessage(chatId, `Топ по времени:\n${timeMessage}`);
      break;
    case '[Мини-паркур] Топ по прохождениям':
      const topPlayersByCompletions = parkourLog
        .sort((a, b) => b.completions - a.completions);
      const completionsMessage = topPlayersByCompletions.map((log, index) => `${index + 1}. ${log.username} - ${log.completions} прохождений`).join('\n');
      statsTelegramBot.sendMessage(chatId, `Топ по прохождениям:\n${completionsMessage}`);
      break;
    case '[Комбинация] Топ по очкам':
      const topPlayersByMaxScore = parkourLog
        .sort((a, b) => b.maxScore - a.maxScore);
      const maxScoreMessage = topPlayersByMaxScore.map((log, index) => `${index + 1}. ${log.username} - ${log.maxScore} очков`).join('\n');
      statsTelegramBot.sendMessage(chatId, `Топ по очкам:\n${maxScoreMessage}`);
      break;
    case '[Комбинация] Топ по раундам':
      const topPlayersByGamesPlayed = parkourLog
        .sort((a, b) => b.gamesPlayed - a.gamesPlayed);
      const gamesPlayedMessage = topPlayersByGamesPlayed.map((log, index) => `${index + 1}. ${log.username} - ${log.gamesPlayed} раундов`).join('\n');
      statsTelegramBot.sendMessage(chatId, `Топ по раундам комбинации:\n${gamesPlayedMessage}`);
      break;
    case '[Афк-Лобби] Топ по рунам':
      const topPlayersByRunes = parkourLog
        .sort((a, b) => b.runes - a.runes);
      const runesMessage = topPlayersByRunes.map((log, index) => `${index + 1}. ${log.username} - ${log.runes} рун`).join('\n');
      statsTelegramBot.sendMessage(chatId, `Топ по рунам:\n${runesMessage}`);
      break;
    case '[Афк-Лобби] Общая статистика':
      const totalPlayers = parkourLog.length;
      const totalCompletions = parkourLog.reduce((sum, log) => sum + log.completions, 0);
      const totalRunes = parkourLog.reduce((sum, log) => sum + log.runes, 0);
      const totalGamesPlayed = parkourLog.reduce((sum, log) => sum + log.gamesPlayed, 0);
      statsTelegramBot.sendMessage(chatId, `Общая статистика:\nКоличество игроков: ${totalPlayers}\nСумма всех прохождений: ${totalCompletions}\nСумма всех рун: ${totalRunes}\nСумма всех раундов комбинации: ${totalGamesPlayed}`);
      break;
    case '[Афк-Лобби] Статистика игрока':
      statsTelegramBot.sendMessage(chatId, 'Введите ник игрока:');
      statsTelegramBot.once('message', (msg) => {
        const playerNick = msg.text;
        let playerLog = parkourLog.find(log => log.username.toLowerCase() === playerNick.toLowerCase());
        if (playerLog) {
          const playerStats = `Статистика игрока ${playerLog.username}:\nПрохождений паркура: ${playerLog.completions}\nЛучшее время паркура: ${playerLog.bestTime.toFixed(2)} секунд\nКоличество рун: ${playerLog.runes}\nКоличество раундов в комбинацию: ${playerLog.gamesPlayed}\nЛучшее количество очков в комбинации: ${playerLog.maxScore}`;
          statsTelegramBot.sendMessage(chatId, playerStats);

          // Получение места игрока в топах
          const timeRank = parkourLog.sort((a, b) => a.bestTime - b.bestTime).findIndex(log => log.username === playerLog.username) + 1;
          const completionsRank = parkourLog.sort((a, b) => b.completions - a.completions).findIndex(log => log.username === playerLog.username) + 1;
          const maxScoreRank = parkourLog.sort((a, b) => b.maxScore - a.maxScore).findIndex(log => log.username === playerLog.username) + 1;
          const gamesPlayedRank = parkourLog.sort((a, b) => b.gamesPlayed - a.gamesPlayed).findIndex(log => log.username === playerLog.username) + 1;
          const runesRank = parkourLog.sort((a, b) => b.runes - a.runes).findIndex(log => log.username === playerLog.username) + 1;

          const ranksMessage = `Места в топах:\nПо времени мини-паркура: ${timeRank}\nПо прохождениям мини-паркура: ${completionsRank}\nПо очкам комбинации: ${maxScoreRank}\nПо раундам комбинации: ${gamesPlayedRank}\nПо количеству рун: ${runesRank}`;
          statsTelegramBot.sendMessage(chatId, ranksMessage);
        } else {
          statsTelegramBot.sendMessage(chatId, 'Игрок не найден.');
        }
      });
      break;
  }
});

// Функция для отправки уведомлений всем пользователям
function sendNotificationToAllUsers(message) {
  const chatIds = loadChatIds();
  chatIds.forEach(chatId => {
    statsTelegramBot.sendMessage(chatId, message).catch(error => {
      console.error(`Failed to send message to chatId ${chatId}:`, error);
    });
  });
}

